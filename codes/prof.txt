import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';

class EmployeeProfile extends StatefulWidget {
  @override
  _EmployeeProfileState createState() => _EmployeeProfileState();
}

class _EmployeeProfileState extends State<EmployeeProfile> {
  TextEditingController _nameController = TextEditingController();
  TextEditingController _addressController = TextEditingController();
  TextEditingController _phoneController = TextEditingController();
  TextEditingController _emailController = TextEditingController();

  bool _isEditing = false;

  @override
  void initState() {
    super.initState();
    // Initialize controllers with initial values
    _nameController.text = '';
    _addressController.text = '';
    _phoneController.text = '';
    _emailController.text = '';
  }
////////////////////////////////////////////////////////////////
  int SelectIndex=0;
  List<Widget>pages=[


  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(40),
          child: Column(
            children: [
              CircleAvatar(
                radius: 70.0,
                backgroundImage: AssetImage('profile.jpeg'),
              ),
              SizedBox(height: 50,),
              _buildProfileField('Name', _nameController, CupertinoIcons.person),
               SizedBox(height: 20,),
              _buildProfileField('Address', _addressController, CupertinoIcons.location),
              SizedBox(height: 20,),
              _buildProfileField('Phone', _phoneController, CupertinoIcons.phone),
              SizedBox(height: 20,),
              _buildProfileField('Email', _emailController, CupertinoIcons.mail),
              SizedBox(height: 40,),

              Container(
                width: double.infinity,


                child: ElevatedButton(
                  onPressed: () {
                    setState(() {
                      _isEditing = !_isEditing; // Toggle editing mode
                      // If currently in editing mode, save the changes
                      if (!_isEditing) {
                        // Save changes here
                        // For demonstration, let's just print the updated values
                        print('Name: ${_nameController.text}');
                        print('Address: ${_addressController.text}');
                        print('Phone: ${_phoneController.text}');
                        print('Email: ${_emailController.text}');
                      }
                    });
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.white,

                  ),
                  child: Text(_isEditing ? 'Save' : 'Edit',
                  style: TextStyle(
                    color: Colors.teal,
                  ),

                  ),
                ),
              ),
            ],
          ),
        ),

      ),
      bottomNavigationBar: BottomNavigationBar(
        selectedItemColor: Colors.teal[100],
        iconSize: 30.0,

        currentIndex: SelectIndex,
        onTap: (index){
          setState(() {
            SelectIndex=index;
          });

        },
        items: [
          BottomNavigationBarItem(label: "HomeScreen",icon: Icon(Icons.home)),
          BottomNavigationBarItem(label: "MyProfile",icon: Icon(Icons.person)),
        ],


      ),


    );

  }

  Widget _buildProfileField(String title, TextEditingController controller, IconData iconData) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(10),
        boxShadow: [
          BoxShadow(
            offset: Offset(0, 5),
            color: Colors.teal.withOpacity(.2),
            spreadRadius: 2,
            blurRadius: 10,
          ),
        ],
      ),
      child: _isEditing
          ? Padding(
        padding: const EdgeInsets.symmetric(horizontal: 20.0),
        child: TextFormField(
          controller: controller,
          decoration: InputDecoration(
            labelText: title,
            prefixIcon: Icon(iconData),
          ),
        ),
      )
          : ListTile(
        title: Text(title),
        subtitle: Text(controller.text),
        leading: Icon(iconData),
      ),
    );
  }
}
